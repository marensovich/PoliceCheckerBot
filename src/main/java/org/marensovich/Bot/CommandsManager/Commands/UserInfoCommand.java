package org.marensovich.Bot.CommandsManager.Commands;

import org.marensovich.Bot.CommandsManager.Command;
import org.marensovich.Bot.Data.UserInfo;
import org.marensovich.Bot.DatabaseManager;
import org.marensovich.Bot.TelegramBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.awt.*;

public class UserInfoCommand implements Command {
    @Override
    public String getName() {
        return "/userinfo";
    }

    @Override
    public void execute(Update update) {
        Long chatId = update.getMessage().getChatId();
        Long userId = update.getMessage().getFrom().getId();

        TelegramBot.getInstance().getCommandManager().setActiveCommand(userId, this);

        DatabaseManager databaseManager = TelegramBot.getDatabaseManager();
        UserInfo userData;
        userData = databaseManager.getUserInfo(userId);
        if (userData == null) {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            sendMessage.setParseMode("HTML");
            try {
                TelegramBot.getInstance().execute(sendMessage);
            } catch (TelegramApiException e) {
                throw new RuntimeException(e);
            }
            TelegramBot.getInstance().getCommandManager().unsetActiveCommand(userId);
            return;
        }
        String limitgenmap;
        if (userData.subscribe.equals("vip")){
            limitgenmap = userData.genMap + "/" + TelegramBot.getDatabaseManager().getIntValueBotData("limit_map_generation_VIP");
        } else if (userData.subscribe.equals("premium")){
            limitgenmap = userData.genMap + "/" + TelegramBot.getDatabaseManager().getIntValueBotData("limit_map_generation_PREMIUM");
        } else {
            limitgenmap = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
        }

        String message = String.format(
                          """
                        <b>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
                        <b> üÜî ID: </b>%d
                        <b> üåê –Ø–∑—ã–∫: </b>%s
                        <b> üé® –¢–µ–º–∞: </b>%s
                        <b> üó∫Ô∏è –¢–∏–ø –∫–∞—Ä—Ç—ã: </b>%s
                        <b> üîî –ü–æ–¥–ø–∏—Å–∫–∞: </b>%s
                        <b> üó∫Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã: </b>%d
                        <b> üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: </b>%s
                        <b> üí≥ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: </b>%s
                        <b> ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞: </b>%s""",
                userData.getUserId(),
                userData.getYandexLang(),
                userData.getYandexTheme(),
                userData.getYandexMaptype(),
                userData.getSubscribe(),
                limitgenmap,
                userData.getRegistrationTime().toString(),
                (userData.getSubscribeType() != null) ? userData.getSubscribeType() : "–ù–µ—Ç",
                (userData.getSubscriptionExpiration() != null) ? userData.getSubscriptionExpiration().toString() : "–ù–µ—Ç"
        );

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message);
        sendMessage.setParseMode("HTML");
        try {
            TelegramBot.getInstance().execute(sendMessage);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
        TelegramBot.getInstance().getCommandManager().unsetActiveCommand(userId);
    }
}
