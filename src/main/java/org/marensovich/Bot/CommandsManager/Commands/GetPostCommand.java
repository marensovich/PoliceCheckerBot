package org.marensovich.Bot.CommandsManager.Commands;

import org.marensovich.Bot.CommandsManager.Command;
import org.marensovich.Bot.Data.PolicePost;
import org.marensovich.Bot.Maps.MapUtils.Distance;
import org.marensovich.Bot.TelegramBot;
import org.telegram.telegrambots.meta.api.methods.send.SendLocation;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Location;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class GetPostCommand implements Command {

    private enum State {
        AWAITING_LOCATION,
        SHOWING_RESULTS
    }

    public static class UserState {
        State currentState;
        Location userLocation;
        int currentPage;
        int lastListPage;

        UserState() {
            this.currentState = State.AWAITING_LOCATION;
            this.currentPage = 0;
            this.lastListPage = 0;
        }


        public boolean isAwaitingLocation() {
            return currentState == State.AWAITING_LOCATION;
        }
    }

    /**
     * –ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    private static final int PAGE_SIZE = 5;

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—Å—Ç–∞ callback–æ–≤
     */
    public static final String CALLBACK_PREFIX = "post_";
    public static final String CALLBACK_NEXT_PAGE = CALLBACK_PREFIX + "next";
    public static final String CALLBACK_PREV_PAGE = CALLBACK_PREFIX + "prev";
    public static final String CALLBACK_POST_DETAIL = CALLBACK_PREFIX + "detail";
    public static final String CALLBACK_BACK_TO_LIST = CALLBACK_PREFIX + "back";
    public static final String CALLBACK_SEND_LOCATION = CALLBACK_PREFIX + "location";
    public static final String CALLBACK_PAGE_INFO = CALLBACK_PREFIX + "info";


    private final Map<Long, UserState> userStates = new ConcurrentHashMap<>();
    private Integer lastMessageId = null;

    @Override
    public String getName() {
        return "/getpost";
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /getpost
     * @param update
     */
    @Override
    public void execute(Update update) {
        Long userId = update.getMessage().getFrom().getId();
        UserState userState = getUserState(userId);

        if (!TelegramBot.getInstance().getCommandManager().hasActiveCommand(userId)) {
            TelegramBot.getInstance().getCommandManager().setActiveCommand(userId, this);
        }

        try {
            switch (userState.currentState) {
                case AWAITING_LOCATION:
                    handleAwaitingLocation(update, userState);
                    break;
                case SHOWING_RESULTS:
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    break;
            }
        } catch (Exception e) {
            cleanupUserState(userId);
            sendErrorMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–∏–π update —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
     * @param update
     * @param location
     */
    public void executeLocation(Update update, Location location) {
        Long userId = update.getMessage().getFrom().getId();
        if (!TelegramBot.getInstance().getCommandManager().hasActiveCommand(userId)) {
            TelegramBot.getInstance().getCommandManager().setActiveCommand(userId, this);
        }
        UserState userState = getUserState(userId);

        try {
            userState.userLocation = location;
            userState.currentState = State.SHOWING_RESULTS;
            showPostsPage(update.getMessage().getChatId(), userState, 0);
        } catch (Exception e) {
            cleanupUserState(userId);
            sendErrorMessage(update.getMessage().getChatId(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è AWAITING_LOCATION
     * @param update
     * @param userState
     */
    private void handleAwaitingLocation(Update update, UserState userState) {
        if (update.getMessage().hasLocation()) {
            executeLocation(update, update.getMessage().getLocation());
        } else {
            requestLocation(update.getMessage().getChatId());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     * @param update
     * @param callbackData
     */
    public void handlePageNavigation(Update update, String callbackData) {
        Long userId = update.getCallbackQuery().getFrom().getId();
        UserState userState = getUserState(userId);
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        try {
            String[] parts = callbackData.split(":");
            if (parts.length != 2) {
                throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö");
            }
            int newPage = Integer.parseInt(parts[1]);
            showPostsPage(chatId, userState, newPage);
        } catch (Exception e) {
            cleanupUserState(userId);
            sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–µ
     * @param update
     * @param postId
     */
    public void showPostDetails(Update update, long postId) {
        try {
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            long userId = update.getCallbackQuery().getFrom().getId();
            UserState userState = getUserState(userId);

            userState.lastListPage = userState.currentPage;

            List<PolicePost> posts = getNearbyPosts(
                    userState.userLocation.getLatitude(),
                    userState.userLocation.getLongitude()
            );

            PolicePost post = posts.stream()
                    .filter(p -> p.id == postId)
                    .findFirst()
                    .orElse(null);

            if (post == null) {
                sendErrorMessage(chatId, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            String details = formatPostDetails(post, userState);
            InlineKeyboardMarkup keyboard = createBackKeyboard(postId);
            editOrSendMessage(chatId, details, keyboard);

        } catch (Exception e) {
            e.printStackTrace();
            sendErrorMessage(update.getCallbackQuery().getMessage().getChatId(),
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ –º–µ–Ω—é —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–µ
     * @param update
     */
    public void handleBackToList(Update update) {
        try {
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            long userId = update.getCallbackQuery().getFrom().getId();
            UserState userState = getUserState(userId);

            showPostsPage(chatId, userState, userState.lastListPage);
        } catch (Exception e) {
            e.printStackTrace();
            sendErrorMessage(update.getCallbackQuery().getMessage().getChatId(),
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É");
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–µ
     * @param post
     * @param userState
     * @return
     */
    private String formatPostDetails(PolicePost post, UserState userState) {
        return String.format(
                "üîç –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞:\n\n" +
                        "–¢–∏–ø: %s%s\n" +
                        "–î–∞—Ç–∞: %s\n" +
                        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %s\n" +
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n\n" +
                        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %.6f, %.6f",
                post.postType,
                post.expired ? " (–ù–µ–∞–∫—Ç—É–∞–ª–µ–Ω)" : "",
                post.registrationTime.toLocalDateTime(),
                post.distance,
                post.comment,
                post.latitude,
                post.longitude
        );
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param chatId
     * @param text
     * @param keyboard
     */
    private void editOrSendMessage(long chatId, String text, InlineKeyboardMarkup keyboard) {
        try {
            if (lastMessageId != null) {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(String.valueOf(chatId));
                editMessage.setMessageId(lastMessageId);
                editMessage.setText(text);
                editMessage.setReplyMarkup(keyboard);
                TelegramBot.getInstance().execute(editMessage);
            } else {
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText(text);
                message.setReplyMarkup(keyboard);
                Message sentMessage = TelegramBot.getInstance().execute(message);
                lastMessageId = sentMessage.getMessageId();
            }
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–µ
     * @param postId
     * @return
     */
    private InlineKeyboardMarkup createBackKeyboard(long postId) {
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
                                        .callbackData("post_location:" + postId)
                                        .build()
                        ),
                        List.of(
                                InlineKeyboardButton.builder()
                                        .text("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")
                                        .callbackData(CALLBACK_BACK_TO_LIST)
                                        .build()
                        )
                ))
                .build();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ—Å—Ç–∞
     * @param update
     * @param postId
     */
    public void sendPostLocation(Update update, long postId) {
        try {
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            long userId = update.getCallbackQuery().getFrom().getId();
            UserState userState = getUserState(userId);

            List<PolicePost> posts = getNearbyPosts(
                    userState.userLocation.getLatitude(),
                    userState.userLocation.getLongitude()
            );

            PolicePost post = posts.stream()
                    .filter(p -> p.id == postId)
                    .findFirst()
                    .orElse(null);

            if (post == null) {
                sendErrorMessage(chatId, "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return;
            }

            SendLocation locationMessage = new SendLocation();
            locationMessage.setChatId(String.valueOf(chatId));
            locationMessage.setLatitude(post.latitude);
            locationMessage.setLongitude(post.longitude);

            TelegramBot.getInstance().execute(locationMessage);

            TelegramBot.getInstance().getCommandManager().unsetActiveCommand(userId);
        } catch (Exception e) {
            e.printStackTrace();
            sendErrorMessage(update.getCallbackQuery().getMessage().getChatId(),
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞");
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
     * @param chatId
     * @param userState
     * @param page
     * @throws TelegramApiException
     */
    private void showPostsPage(long chatId, UserState userState, int page) throws TelegramApiException {
        try {
            userState.currentPage = page;
            List<PolicePost> posts = getNearbyPosts(
                    userState.userLocation.getLatitude(),
                    userState.userLocation.getLongitude()
            );

            if (posts.isEmpty()) {
                sendNoPostsMessage(chatId);
                return;
            }

            InlineKeyboardMarkup keyboard = createPostsKeyboard(posts, page);

            if (lastMessageId == null) {
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã –î–ü–°:");
                message.setReplyMarkup(keyboard);
                Message sentMessage = TelegramBot.getInstance().execute(message);
                lastMessageId = sentMessage.getMessageId();
            } else {
                EditMessageText editMessage = new EditMessageText();
                editMessage.setChatId(String.valueOf(chatId));
                editMessage.setMessageId(lastMessageId);
                editMessage.setText("–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã –î–ü–°:");
                editMessage.setReplyMarkup(keyboard);
                TelegramBot.getInstance().execute(editMessage);
            }
        } catch (SQLException e) {
            throw new TelegramApiException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤
     * @param posts
     * @param page
     * @return
     */
    private InlineKeyboardMarkup createPostsKeyboard(List<PolicePost> posts, int page) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        int start = page * PAGE_SIZE;
        int end = Math.min(start + PAGE_SIZE, posts.size());

        for (int i = start; i < end; i++) {
            PolicePost post = posts.get(i);
            rows.add(List.of(
                    InlineKeyboardButton.builder()
                            .text(String.format("%s%s (%s)",
                                    post.expired ? "[–ù–µ–∞–∫—Ç—É–∞–ª–µ–Ω] " : "",
                                    post.postType,
                                    post.distance))
                            .callbackData(CALLBACK_POST_DETAIL + ":" + post.id)
                            .build()
            ));
        }
        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text(String.format("–°—Ç—Ä–∞–Ω–∏—Ü–∞ %d", page + 1))
                        .callbackData(CALLBACK_PAGE_INFO)
                        .build()
        ));
        addNavigationButtons(rows, posts.size(), page);
        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
     * @param rows
     * @param totalPosts
     * @param currentPage
     */
    private void addNavigationButtons(List<List<InlineKeyboardButton>> rows,
                                      int totalPosts, int currentPage) {
        if (totalPosts <= PAGE_SIZE) return;

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        int totalPages = (int) Math.ceil((double) totalPosts / PAGE_SIZE);

        if (currentPage > 0) {
            navRow.add(InlineKeyboardButton.builder()
                    .text("‚Üê –ù–∞–∑–∞–¥")
                    .callbackData(CALLBACK_PREV_PAGE + ":" + (currentPage - 1))
                    .build());
        }

        if (currentPage < totalPages - 1) {
            navRow.add(InlineKeyboardButton.builder()
                    .text("–í–ø–µ—Ä–µ–¥ ‚Üí")
                    .callbackData(CALLBACK_NEXT_PAGE + ":" + (currentPage + 1))
                    .build());
        }

        if (!navRow.isEmpty()) {
            rows.add(navRow);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
     * @param centerLat
     * @param centerLon
     * @return
     * @throws SQLException
     */
    private List<PolicePost> getNearbyPosts(double centerLat, double centerLon) throws SQLException {
        return TelegramBot.getDatabaseManager().getFilteredPolicePosts(centerLat, centerLon, 10);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
     * @param chatId
     */
    private void sendNoPostsMessage(long chatId) {
        try {
            if (lastMessageId != null) {
                DeleteMessage deleteMessage = new DeleteMessage();
                deleteMessage.setChatId(String.valueOf(chatId));
                deleteMessage.setMessageId(lastMessageId);
                TelegramBot.getInstance().execute(deleteMessage);
                lastMessageId = null;
            }

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("üö´ –í —Ä–∞–¥–∏—É—Å–µ 10 –∫–º –ø–æ—Å—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã");
            TelegramBot.getInstance().execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     * @param chatId
     */
    private void requestLocation(long chatId) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–æ—Å—Ç–æ–≤:");
            TelegramBot.getInstance().execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param chatId
     * @param errorText
     */
    private void sendErrorMessage(long chatId, String errorText) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("‚ö†Ô∏è " + errorText);
            TelegramBot.getInstance().execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId
     * @return
     */
    public UserState getUserState(Long userId) {
        return userStates.computeIfAbsent(userId, k -> new UserState());
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId
     */
    private void cleanupUserState(Long userId) {
        userStates.remove(userId);
        lastMessageId = null;
        TelegramBot.getInstance().getCommandManager().unsetActiveCommand(userId);
    }
}